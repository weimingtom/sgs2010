--[[
【万箭齐发】
出牌时机：出牌阶段。
使用目标：除你以外的所有角色。
作用效果：按行动顺序结算，除非目标角色打出1张【闪】，否则该角色受到【万箭齐发】对其造成的1点伤害。
★你必须指定除你以外的所有角色为目标，然后他们依次（从你的下家开始）选择是否打出【闪】。

[Q]使用【万箭齐发】时，如何结算？[A]【万箭齐发】使用后，按照行动顺序，从使用者的下家开始依次打出【闪】。如果有角色不打出【闪】，则立刻结算反馈或者奖励，濒死状态优先结算。即使使用【万箭齐发】的角色已经死亡，【万箭齐发】依然要结算到底。类似地，南蛮入侵、桃园结义、五谷丰登、铁索连环等锦囊处理原则相同。
[Q]在【万箭齐发】结算时，角色是否可以发动【八卦阵】技能判定出【闪】？[A]可以。
[Q]如果主公使用【万箭齐发】杀死忠臣和反贼，如何结算？[A]按照行动顺序结算。如果反贼先死则主公摸3张牌，然后忠臣死亡的话再弃光所有的牌。反之先弃光所有的牌再摸3张牌。
[Q]万箭齐发是否能造成属性伤害？[A]不能。
--]]



import "../global/reg.lua";


local cfg = {
	sid = 'wjqf',
	name = '万箭齐发',
	type = CardType_Strategy,
	desc = [==[【万箭齐发】
出牌时机：出牌阶段。
使用目标：除你以外的所有角色。
作用效果：按行动顺序结算，除非目标角色打出1张【闪】，否则该角色受到【万箭齐发】对其造成的1点伤害。
★你必须指定除你以外的所有角色为目标，然后他们依次（从你的下家开始）选择是否打出【闪】。]==],
	
	can_out = {
		[GameEvent_RoundOutCard] = function(cfg, game, event, player, pos_card)
			-- 出牌阶段的检测，只会针对回合玩家。这里不用额外检查是不是。
			-- 出牌阶段总是可以出锦囊牌的。
			return YES;
		end,
	},

	event = {
		-- 如果出牌时需要选择目标，则会Call这个事件来决定牌的基本攻击范围，
		--  返回-1表示不检查攻击范围, >= 0此牌的基本攻击距离（注意实际攻击范围可能受技能或者武器的影响）
		[GameEvent_GetBaseAttackDis] = function (cfg, game, event, player)
			event.attack_dis.base = -1; 
			return R_SUCC;
		end,
	
	
		-- 出牌过程由下列3个事件驱动


		-- 出牌前的准备（如选择目标等，某些技能可以跳过此事件）
		[GameEvent_OutCardPrepare] = function(cfg, game, event, player)
			-- 指定为除出牌者以外的所有现存玩家为目标
			local p = game_next_player(game, player);
			event.out_card.target_num = 0;
			while p ~= player do
				event.out_card.targets[event.out_card.target_num] = p;
				event.out_card.target_num = event.out_card.target_num + 1;
				p = game_next_player(game, p);
			end
			-- 如果准备完成应该返回R_SUCC，让出牌过程继续进行下去。
			-- 返回R_CANCEL,则出牌中止，牌不会进入弃牌堆。
			return R_SUCC;
		end,

		-- 出牌的过程驱动(针对每个目标单独驱动)
		[GameEvent_OutCard] = function(cfg, game, event, player)
			-- 需要出一张闪来抵消此牌的效果。否则受到伤害
			
			local out_pattern  = OutCardPattern();
			game_load_out_pattern(out_pattern,  'h:{shan}?');

			ret = game_passive_out(game, event, event.target, player, out_pattern,
				"请出一张【"..card_sid2name('shan').."】:");

			if(ret == R_SUCC) then
				return R_CANCEL;
			end

		
		
			-- 如果没有特别的驱动过程，则应该返回 R_SUCC，让结算过程继续。
			-- 如果返回R_CANCEL，则出牌过程完成，牌会进入弃牌堆，但不会执行出牌结算过程	
			return R_SUCC; 
		end,
		
		-- 出牌后的结算（某些技能可以跳过此事件）
		[GameEvent_OutCardCalc] = function (cfg, game, event, player)
			-- 结算牌的效果，如扣体力，弃目标的牌等等。针对每个目标都会执行结算事件
			-- lost life( from player, out card 'nmrq', skill 0 )
			return game_player_add_life(game, event, event.target, -1, player, event.out_card, 0);
		end,
	},

};


-- register
reg_card(cfg);


